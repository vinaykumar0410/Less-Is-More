
Sure! Below is a concise and comprehensive JavaScript cheat sheet that covers everything from **basic to advanced** concepts. Each section includes short explanations and minimal code examples.

---

## **1. Basics**

### **Variables**
```javascript
let x = 10;       // Mutable variable
const y = 20;     // Immutable variable
var z = 30;       // Old way (avoid using `var`)
```
- `let`: Block-scoped, can be reassigned.
- `const`: Block-scoped, cannot be reassigned.
- `var`: Function-scoped (legacy).

---

### **Data Types**
```javascript
let num = 10;             // Number
let str = "Hello";        // String
let bool = true;          // Boolean
let arr = [1, 2, 3];      // Array
let obj = { name: "John" }; // Object
let undef = undefined;    // Undefined
let nul = null;           // Null
```
- Primitive types: `Number`, `String`, `Boolean`, `Undefined`, `Null`.
- Reference types: `Array`, `Object`.

---

### **Operators**
```javascript
let sum = 5 + 3;         // Addition
let diff = 5 - 3;        // Subtraction
let mul = 5 * 3;         // Multiplication
let div = 5 / 3;         // Division
let mod = 5 % 3;         // Modulus
let exp = 5 ** 3;        // Exponentiation

let isEqual = (5 == '5');  // Loose equality (true)
let isStrictEqual = (5 === '5'); // Strict equality (false)
```
- Use `===` for strict comparison (value + type).
- Use `==` for loose comparison (value only).

---

### **Conditionals**
```javascript
if (x > 10) {
  console.log("Greater than 10");
} else if (x === 10) {
  console.log("Equal to 10");
} else {
  console.log("Less than 10");
}

// Ternary operator
let result = (x > 10) ? "Greater" : "Smaller";
```

---

### **Loops**
```javascript
for (let i = 0; i < 5; i++) {
  console.log(i);
}

while (x > 0) {
  console.log(x--);
}

do {
  console.log(x--);
} while (x > 0);

// For-of loop (iterates over values)
for (let val of [1, 2, 3]) {
  console.log(val);
}
```

---

## **2. Functions**

### **Function Declaration**
```javascript
function add(a, b) {
  return a + b;
}

console.log(add(2, 3)); // 5
```

### **Arrow Functions**
```javascript
const multiply = (a, b) => a * b;

console.log(multiply(2, 3)); // 6
```
- Arrow functions have implicit returns if no `{}` is used.
- They do not have their own `this` context.

---

### **Default Parameters**
```javascript
function greet(name = "Guest") {
  return `Hello, ${name}`;
}

console.log(greet()); // Hello, Guest
```

---

### **Rest & Spread Operators**
```javascript
// Rest operator (collects arguments into an array)
function sum(...args) {
  return args.reduce((acc, curr) => acc + curr, 0);
}

console.log(sum(1, 2, 3)); // 6

// Spread operator (spreads array or object)
const arr1 = [1, 2];
const arr2 = [...arr1, 3, 4]; // [1, 2, 3, 4]
```

---

## **3. Arrays**

### **Common Methods**
```javascript
let arr = [1, 2, 3, 4];

arr.push(5);        // Add to end
arr.pop();          // Remove from end
arr.shift();        // Remove from start
arr.unshift(0);     // Add to start

arr.map(x => x * 2); // [2, 4, 6, 8]
arr.filter(x => x > 2); // [3, 4]
arr.reduce((acc, curr) => acc + curr, 0); // 10
```

---

## **4. Objects**

### **Object Basics**
```javascript
let person = {
  name: "John",
  age: 30,
  greet() {
    return `Hi, I'm ${this.name}`;
  }
};

console.log(person.greet()); // Hi, I'm John
```

### **Destructuring**
```javascript
let { name, age } = person;
console.log(name); // John

let nums = [1, 2];
let [a, b] = nums;
console.log(a); // 1
```

---

## **5. Advanced Concepts**

### **Promises**
```javascript
const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve("Done"), 1000);
});

promise.then(result => console.log(result)) // Done
       .catch(err => console.error(err));
```

### **Async/Await**
```javascript
async function fetchData() {
  try {
    let response = await fetch('https://api.example.com/data');
    let data = await response.json();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
}
```

---

### **Classes**
```javascript
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  greet() {
    return `Hi, I'm ${this.name}`;
  }
}

let john = new Person("John", 30);
console.log(john.greet()); // Hi, I'm John
```

---

### **Modules**
```javascript
// math.js
export const add = (a, b) => a + b;

// main.js
import { add } from './math.js';
console.log(add(2, 3)); // 5
```

---

### **Closures**
```javascript
function outer() {
  let count = 0;
  return function inner() {
    return ++count;
  };
}

const counter = outer();
console.log(counter()); // 1
console.log(counter()); // 2
```
- A closure gives access to an outer functionâ€™s scope from an inner function.

---

### **Prototypes**
```javascript
function Person(name) {
  this.name = name;
}

Person.prototype.greet = function() {
  return `Hi, I'm ${this.name}`;
};

let john = new Person("John");
console.log(john.greet()); // Hi, I'm John
```

---

### **Error Handling**
```javascript
try {
  throw new Error("Something went wrong");
} catch (err) {
  console.error(err.message); // Something went wrong
} finally {
  console.log("This always runs");
}
```

---

## **6. ES6+ Features**

### **Template Literals**
```javascript
let name = "John";
let greeting = `Hello, ${name}`;
console.log(greeting); // Hello, John
```

### **Optional Chaining**
```javascript
let user = {};
console.log(user?.address?.city); // undefined (no error)
```

### **Nullish Coalescing**
```javascript
let value = null ?? "default";
console.log(value); // default
```

---

This cheat sheet is designed to give you a quick overview of JavaScript from basic to advanced concepts. Practice these snippets to solidify your understanding!
